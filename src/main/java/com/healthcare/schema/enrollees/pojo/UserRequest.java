//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.01.29 at 12:56:03 PM EST 
//


package com.healthcare.schema.enrollees.pojo;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for userRequest complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="userRequest"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="userName" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="userId" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="mobileNumber" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element name="birthDate" type="{http://www.w3.org/2001/XMLSchema}date"/&gt;
 *         &lt;element name="activationStatus" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="emailID" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "userRequest", propOrder = {
    "userName",
    "userId",
    "mobileNumber",
    "birthDate",
    "activationStatus",
    "emailID"
})
public class UserRequest implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    @XmlElement(required = true)
    protected String userName;
    @XmlElement(required = true)
    protected String userId;
    protected String mobileNumber;
    @XmlElement(required = true)
    @XmlSchemaType(name = "date")
    protected XMLGregorianCalendar birthDate;
    @XmlElement(required = true)
    protected String activationStatus;
    protected String emailID;

    /**
     * Gets the value of the userName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getUserName() {
        return userName;
    }

    /**
     * Sets the value of the userName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setUserName(String value) {
        this.userName = value;
    }

    /**
     * Gets the value of the userId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getUserId() {
        return userId;
    }

    /**
     * Sets the value of the userId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setUserId(String value) {
        this.userId = value;
    }

    /**
     * Gets the value of the mobileNumber property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMobileNumber() {
        return mobileNumber;
    }

    /**
     * Sets the value of the mobileNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMobileNumber(String value) {
        this.mobileNumber = value;
    }

    /**
     * Gets the value of the birthDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getBirthDate() {
        return birthDate;
    }

    /**
     * Sets the value of the birthDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setBirthDate(XMLGregorianCalendar value) {
        this.birthDate = value;
    }

    /**
     * Gets the value of the activationStatus property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getActivationStatus() {
        return activationStatus;
    }

    /**
     * Sets the value of the activationStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setActivationStatus(String value) {
        this.activationStatus = value;
    }

    /**
     * Gets the value of the emailID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getEmailID() {
        return emailID;
    }

    /**
     * Sets the value of the emailID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setEmailID(String value) {
        this.emailID = value;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            String theUserName;
            theUserName = this.getUserName();
            strategy.appendField(locator, this, "userName", buffer, theUserName, (this.userName!= null));
        }
        {
            String theUserId;
            theUserId = this.getUserId();
            strategy.appendField(locator, this, "userId", buffer, theUserId, (this.userId!= null));
        }
        {
            String theMobileNumber;
            theMobileNumber = this.getMobileNumber();
            strategy.appendField(locator, this, "mobileNumber", buffer, theMobileNumber, (this.mobileNumber!= null));
        }
        {
            XMLGregorianCalendar theBirthDate;
            theBirthDate = this.getBirthDate();
            strategy.appendField(locator, this, "birthDate", buffer, theBirthDate, (this.birthDate!= null));
        }
        {
            String theActivationStatus;
            theActivationStatus = this.getActivationStatus();
            strategy.appendField(locator, this, "activationStatus", buffer, theActivationStatus, (this.activationStatus!= null));
        }
        {
            String theEmailID;
            theEmailID = this.getEmailID();
            strategy.appendField(locator, this, "emailID", buffer, theEmailID, (this.emailID!= null));
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final UserRequest that = ((UserRequest) object);
        {
            String lhsUserName;
            lhsUserName = this.getUserName();
            String rhsUserName;
            rhsUserName = that.getUserName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userName", lhsUserName), LocatorUtils.property(thatLocator, "userName", rhsUserName), lhsUserName, rhsUserName, (this.userName!= null), (that.userName!= null))) {
                return false;
            }
        }
        {
            String lhsUserId;
            lhsUserId = this.getUserId();
            String rhsUserId;
            rhsUserId = that.getUserId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userId", lhsUserId), LocatorUtils.property(thatLocator, "userId", rhsUserId), lhsUserId, rhsUserId, (this.userId!= null), (that.userId!= null))) {
                return false;
            }
        }
        {
            String lhsMobileNumber;
            lhsMobileNumber = this.getMobileNumber();
            String rhsMobileNumber;
            rhsMobileNumber = that.getMobileNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mobileNumber", lhsMobileNumber), LocatorUtils.property(thatLocator, "mobileNumber", rhsMobileNumber), lhsMobileNumber, rhsMobileNumber, (this.mobileNumber!= null), (that.mobileNumber!= null))) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsBirthDate;
            lhsBirthDate = this.getBirthDate();
            XMLGregorianCalendar rhsBirthDate;
            rhsBirthDate = that.getBirthDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "birthDate", lhsBirthDate), LocatorUtils.property(thatLocator, "birthDate", rhsBirthDate), lhsBirthDate, rhsBirthDate, (this.birthDate!= null), (that.birthDate!= null))) {
                return false;
            }
        }
        {
            String lhsActivationStatus;
            lhsActivationStatus = this.getActivationStatus();
            String rhsActivationStatus;
            rhsActivationStatus = that.getActivationStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "activationStatus", lhsActivationStatus), LocatorUtils.property(thatLocator, "activationStatus", rhsActivationStatus), lhsActivationStatus, rhsActivationStatus, (this.activationStatus!= null), (that.activationStatus!= null))) {
                return false;
            }
        }
        {
            String lhsEmailID;
            lhsEmailID = this.getEmailID();
            String rhsEmailID;
            rhsEmailID = that.getEmailID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "emailID", lhsEmailID), LocatorUtils.property(thatLocator, "emailID", rhsEmailID), lhsEmailID, rhsEmailID, (this.emailID!= null), (that.emailID!= null))) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            String theUserName;
            theUserName = this.getUserName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userName", theUserName), currentHashCode, theUserName, (this.userName!= null));
        }
        {
            String theUserId;
            theUserId = this.getUserId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userId", theUserId), currentHashCode, theUserId, (this.userId!= null));
        }
        {
            String theMobileNumber;
            theMobileNumber = this.getMobileNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mobileNumber", theMobileNumber), currentHashCode, theMobileNumber, (this.mobileNumber!= null));
        }
        {
            XMLGregorianCalendar theBirthDate;
            theBirthDate = this.getBirthDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "birthDate", theBirthDate), currentHashCode, theBirthDate, (this.birthDate!= null));
        }
        {
            String theActivationStatus;
            theActivationStatus = this.getActivationStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "activationStatus", theActivationStatus), currentHashCode, theActivationStatus, (this.activationStatus!= null));
        }
        {
            String theEmailID;
            theEmailID = this.getEmailID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "emailID", theEmailID), currentHashCode, theEmailID, (this.emailID!= null));
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof UserRequest) {
            final UserRequest copy = ((UserRequest) draftCopy);
            {
                Boolean userNameShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, (this.userName!= null));
                if (userNameShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceUserName;
                    sourceUserName = this.getUserName();
                    String copyUserName = ((String) strategy.copy(LocatorUtils.property(locator, "userName", sourceUserName), sourceUserName, (this.userName!= null)));
                    copy.setUserName(copyUserName);
                } else {
                    if (userNameShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.userName = null;
                    }
                }
            }
            {
                Boolean userIdShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, (this.userId!= null));
                if (userIdShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceUserId;
                    sourceUserId = this.getUserId();
                    String copyUserId = ((String) strategy.copy(LocatorUtils.property(locator, "userId", sourceUserId), sourceUserId, (this.userId!= null)));
                    copy.setUserId(copyUserId);
                } else {
                    if (userIdShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.userId = null;
                    }
                }
            }
            {
                Boolean mobileNumberShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, (this.mobileNumber!= null));
                if (mobileNumberShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceMobileNumber;
                    sourceMobileNumber = this.getMobileNumber();
                    String copyMobileNumber = ((String) strategy.copy(LocatorUtils.property(locator, "mobileNumber", sourceMobileNumber), sourceMobileNumber, (this.mobileNumber!= null)));
                    copy.setMobileNumber(copyMobileNumber);
                } else {
                    if (mobileNumberShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.mobileNumber = null;
                    }
                }
            }
            {
                Boolean birthDateShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, (this.birthDate!= null));
                if (birthDateShouldBeCopiedAndSet == Boolean.TRUE) {
                    XMLGregorianCalendar sourceBirthDate;
                    sourceBirthDate = this.getBirthDate();
                    XMLGregorianCalendar copyBirthDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "birthDate", sourceBirthDate), sourceBirthDate, (this.birthDate!= null)));
                    copy.setBirthDate(copyBirthDate);
                } else {
                    if (birthDateShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.birthDate = null;
                    }
                }
            }
            {
                Boolean activationStatusShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, (this.activationStatus!= null));
                if (activationStatusShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceActivationStatus;
                    sourceActivationStatus = this.getActivationStatus();
                    String copyActivationStatus = ((String) strategy.copy(LocatorUtils.property(locator, "activationStatus", sourceActivationStatus), sourceActivationStatus, (this.activationStatus!= null)));
                    copy.setActivationStatus(copyActivationStatus);
                } else {
                    if (activationStatusShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.activationStatus = null;
                    }
                }
            }
            {
                Boolean emailIDShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, (this.emailID!= null));
                if (emailIDShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceEmailID;
                    sourceEmailID = this.getEmailID();
                    String copyEmailID = ((String) strategy.copy(LocatorUtils.property(locator, "emailID", sourceEmailID), sourceEmailID, (this.emailID!= null)));
                    copy.setEmailID(copyEmailID);
                } else {
                    if (emailIDShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.emailID = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new UserRequest();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        if (right instanceof UserRequest) {
            final UserRequest target = this;
            final UserRequest leftObject = ((UserRequest) left);
            final UserRequest rightObject = ((UserRequest) right);
            {
                Boolean userNameShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, (leftObject.userName!= null), (rightObject.userName!= null));
                if (userNameShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsUserName;
                    lhsUserName = leftObject.getUserName();
                    String rhsUserName;
                    rhsUserName = rightObject.getUserName();
                    String mergedUserName = ((String) strategy.merge(LocatorUtils.property(leftLocator, "userName", lhsUserName), LocatorUtils.property(rightLocator, "userName", rhsUserName), lhsUserName, rhsUserName, (leftObject.userName!= null), (rightObject.userName!= null)));
                    target.setUserName(mergedUserName);
                } else {
                    if (userNameShouldBeMergedAndSet == Boolean.FALSE) {
                        target.userName = null;
                    }
                }
            }
            {
                Boolean userIdShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, (leftObject.userId!= null), (rightObject.userId!= null));
                if (userIdShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsUserId;
                    lhsUserId = leftObject.getUserId();
                    String rhsUserId;
                    rhsUserId = rightObject.getUserId();
                    String mergedUserId = ((String) strategy.merge(LocatorUtils.property(leftLocator, "userId", lhsUserId), LocatorUtils.property(rightLocator, "userId", rhsUserId), lhsUserId, rhsUserId, (leftObject.userId!= null), (rightObject.userId!= null)));
                    target.setUserId(mergedUserId);
                } else {
                    if (userIdShouldBeMergedAndSet == Boolean.FALSE) {
                        target.userId = null;
                    }
                }
            }
            {
                Boolean mobileNumberShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, (leftObject.mobileNumber!= null), (rightObject.mobileNumber!= null));
                if (mobileNumberShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsMobileNumber;
                    lhsMobileNumber = leftObject.getMobileNumber();
                    String rhsMobileNumber;
                    rhsMobileNumber = rightObject.getMobileNumber();
                    String mergedMobileNumber = ((String) strategy.merge(LocatorUtils.property(leftLocator, "mobileNumber", lhsMobileNumber), LocatorUtils.property(rightLocator, "mobileNumber", rhsMobileNumber), lhsMobileNumber, rhsMobileNumber, (leftObject.mobileNumber!= null), (rightObject.mobileNumber!= null)));
                    target.setMobileNumber(mergedMobileNumber);
                } else {
                    if (mobileNumberShouldBeMergedAndSet == Boolean.FALSE) {
                        target.mobileNumber = null;
                    }
                }
            }
            {
                Boolean birthDateShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, (leftObject.birthDate!= null), (rightObject.birthDate!= null));
                if (birthDateShouldBeMergedAndSet == Boolean.TRUE) {
                    XMLGregorianCalendar lhsBirthDate;
                    lhsBirthDate = leftObject.getBirthDate();
                    XMLGregorianCalendar rhsBirthDate;
                    rhsBirthDate = rightObject.getBirthDate();
                    XMLGregorianCalendar mergedBirthDate = ((XMLGregorianCalendar) strategy.merge(LocatorUtils.property(leftLocator, "birthDate", lhsBirthDate), LocatorUtils.property(rightLocator, "birthDate", rhsBirthDate), lhsBirthDate, rhsBirthDate, (leftObject.birthDate!= null), (rightObject.birthDate!= null)));
                    target.setBirthDate(mergedBirthDate);
                } else {
                    if (birthDateShouldBeMergedAndSet == Boolean.FALSE) {
                        target.birthDate = null;
                    }
                }
            }
            {
                Boolean activationStatusShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, (leftObject.activationStatus!= null), (rightObject.activationStatus!= null));
                if (activationStatusShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsActivationStatus;
                    lhsActivationStatus = leftObject.getActivationStatus();
                    String rhsActivationStatus;
                    rhsActivationStatus = rightObject.getActivationStatus();
                    String mergedActivationStatus = ((String) strategy.merge(LocatorUtils.property(leftLocator, "activationStatus", lhsActivationStatus), LocatorUtils.property(rightLocator, "activationStatus", rhsActivationStatus), lhsActivationStatus, rhsActivationStatus, (leftObject.activationStatus!= null), (rightObject.activationStatus!= null)));
                    target.setActivationStatus(mergedActivationStatus);
                } else {
                    if (activationStatusShouldBeMergedAndSet == Boolean.FALSE) {
                        target.activationStatus = null;
                    }
                }
            }
            {
                Boolean emailIDShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, (leftObject.emailID!= null), (rightObject.emailID!= null));
                if (emailIDShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsEmailID;
                    lhsEmailID = leftObject.getEmailID();
                    String rhsEmailID;
                    rhsEmailID = rightObject.getEmailID();
                    String mergedEmailID = ((String) strategy.merge(LocatorUtils.property(leftLocator, "emailID", lhsEmailID), LocatorUtils.property(rightLocator, "emailID", rhsEmailID), lhsEmailID, rhsEmailID, (leftObject.emailID!= null), (rightObject.emailID!= null)));
                    target.setEmailID(mergedEmailID);
                } else {
                    if (emailIDShouldBeMergedAndSet == Boolean.FALSE) {
                        target.emailID = null;
                    }
                }
            }
        }
    }

}
